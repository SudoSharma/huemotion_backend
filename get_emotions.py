import os.path
import boto3
import onnxruntime
import numpy as np
from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image

app = Flask(__name__)
CORS(app)

def get_model():
    """Retrieve the emotion recognition model from s3."""
    BUCKET_NAME = 'huemotion'
    MODEL_NAME = 'model.onnx'
    LOCAL_MODEL_PATH = '/tmp/' +  MODEL_NAME
    s3 = boto3.client('s3', region_name="us-west-1")
    s3.download_file(BUCKET_NAME, MODEL_NAME, LOCAL_MODEL_PATH)
    return LOCAL_MODEL_PATH 

def preprocess(img_path):
    """Open image, and prep for inference with model."""
    input_shape = (1, 1, 64, 64)
    img = Image.open(img_path)
    img = img.resize((64, 64), Image.ANTIALIAS)
    img_data = np.array(img)
    img_data = np.resize(img_data, input_shape)
    return img_data.astype('float32')

def emotion_map(classes, N=1):
    """Take the most probable labels (output of postprocess) and return the 
    top N emotional labels that fit the picture."""
    emotion_table = {'neutral':0, 'happiness':1, 'surprise':2, 'sadness':3, 
                     'anger':4, 'disgust':5, 'fear':6, 'contempt':7}
    
    emotion_keys = list(emotion_table.keys())
    emotions = []
    for i in range(N):
        emotions.append(emotion_keys[classes[i]])
    return emotions

def softmax(x):
    """Compute softmax values (probabilities from 0 to 1) 
    for each possible label."""
    x = x.reshape(-1)
    e_x = np.exp(x - np.max(x))
    return e_x / e_x.sum(axis=0)

def postprocess(scores):
    """Take the scores generated by the network and return the class IDs
     in decreasing order of probability."""
    prob = softmax(scores)
    prob = np.squeeze(prob)
    classes = np.argsort(prob)[::-1]
    return classes

def predict_emotions(model, img):
    """Predict emotions from images."""
    session = onnxruntime.InferenceSession(model)
    img_data = preprocess(img)
    input_name = session.get_inputs()[0].name
    output_name = session.get_outputs()[0].name
    r = session.run([output_name], {input_name: img_data})
    return emotion_map(postprocess(r[0]))[0]

@app.route('/', methods=['POST', 'GET'])
def get_emotions():
    """Process image form data and predict emotions."""
    if request.method == 'POST':
        img = request.files['imgData']
        print(img)
        model = '/tmp/model.onnx' 
        if not os.path.exists(model):
            model = get_model()
        result = predict_emotions(model, img)
        print(result)
        return jsonify(result)
    return jsonify("Hello emotion!")

if __name__ == "__main__":
    app.run()
